{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Bosch IoT Manager API",
    "description" : "The Bosch IoT Manager REST API provides the full functionality of the service, including:\n\n&middot;    Retrieving devices and features; adding and modifying device-specific properties and attributes\n\n&middot;    A simple device registration mechanism\n\n&middot;    All grouping capabilities - listing, creating, modifying and deleting directories and tags\n\n&middot;    The complete mass management experience, which allows full control over tasks and rules\n\n\nFind out more details in our [documentation](https://docs.bosch-iot-suite.com/manager/).",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://manager.eu-1.bosch-iot-suite.com/api/1"
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  }, {
    "refreshToken" : [ ]
  } ],
  "paths" : {
    "/mme/rules" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve all available Rules",
        "description" : " Retrieve all available Rules that satisfy the specified filtering criteria.",
        "operationId" : "rules",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "An RQL filter over the Rule attributes.<h5></tt><br/>The attribute names in the filtering conditions can be some of:</h5> <ui><tt><li/><b>state</b> - integer value corresponding to the Rule state as follows: </tt> <br/> <tt>0 - DEFINED </tt> <br/><tt>1 - ENABLED </tt><br/><tt> 2 - DISABLED</tt> <br/><tt>3 - FAILED_TO_ENABLE</tt> <li/><tt><b>stateDescription</b> - string value corresponding to the state description. </tt><li/><tt><b> involvedCount</b> - integer value corresponding to the the number of involved Devices in the Rule.</tt> <li/><tt><b> successCount</b> - integer value corresponding to the the number of successfully finished Devices in the Rule.</tt><li/><tt><b>warningCount</b> - integer value corresponding to the the number of Devices finished with warning in the Rule. </tt><li/><tt><b> errorCount</b> - integer value corresponding the the number of Devices finished with error in the Rule.</tt> <li/><tt><b>cancelCount</b> - integer value corresponding to the the number of Devices finished with warning in the Rule.</tt><li/><tt><b>nextTimeTrigger</b> - corresponds to the next trigger time (in milliseconds since 1 Jan 1970) if the Rule has a timer trigger.</tt> <li/><tt><b>ruleId</b> - string value corresponding to the Rule id. </tt><li/><tt><b>user</b> - string value corresponding to the user name of the user that has created the Rule.<li/> <tt><b>displayName</b> - string value corresponding to the Rule display name. </tt><h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only Rules with the specified properties are returned.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(state,0)</tt></li><li><tt>and(eq(involvedCount,2),eq(state,0))</tt></li></ui>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Rule was successfully retrieved.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Rules" ],
        "summary" : "Create a Rule",
        "description" : "Create a Rule with the specified attributes - <code>displayName</code>, <code>scope</code>, <code>trigger</code>, <code>options</code>, and <code>action</code>. The <code>displayName</code>, <code>scope</code>, <code>trigger</code>, and <code>action</code> are required.",
        "operationId" : "createRule",
        "requestBody" : {
          "description" : "Creates new rule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleInfo"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The Rule was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleStatusInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/actions" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve all available registered Action types",
        "description" : "Retrieve all available registered Action provider types. Groovy Script action type is available by default.",
        "operationId" : "getActionTypes",
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains Action types.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/actions/{actionType}" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve metadata in JSON schema format ",
        "description" : "Retrieve JSON schema format metadata specified by the given <code>actionType</code>, describing the input needed on Rule activation.",
        "operationId" : "getActionDefMetada",
        "parameters" : [ {
          "name" : "actionType",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains JSON schema format metadata.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Action Type was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/devices/{deviceId}" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve all Rules involving a particular Device",
        "description" : "Retrieve all Rules involving a particular Device in which the latter satisfies the applied state filter.<p> <h4>Available stateFilter values:</h4> <ui><li><tt> FINISHED_SUCCESS(0) : Retrieve only Devices that have finished with a success state</tt></li>  <li><tt> FINISHED_WARNING(1) : Retrieve only Devices that have finished the execution with a warning state</tt></li> <li><tt> FINISHED_ERROR(2) : Retrieve only Devices that have finished the execution with an error state</tt></li> <li><tt> FINISHED_CANCELED(3) : Retrieve only devices that have finished the execution with a canceled state</tt></li> <li><tt> RUNNING(4) : Retrieve only Devices that have a running state</tt></li>  <li><tt>FINISHED(64): This value unites all FINISHED_xxx values and could be used only as a parameter for filtering</tt></li><li><tt>ANY(128): Retrieve all involved devices, regardless of the completion state",
        "operationId" : "listRulesForDevice",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stateFilter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "FINISHED_SUCCESS", "FINISHED_WARNING", "FINISHED_ERROR", "FINISHED_CANCELED", "RUNNING", "FINISHED", "ANY" ]
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains a list of <code>DeviceRuleStatus</code>.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/trigger/types" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve all available registered Trigger types",
        "description" : "Retrieve all available registered Trigger Provider types.",
        "operationId" : "triggerTypes",
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains Trigger types.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/trigger/types/{triggerType}/eventsMetadata" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve a JSON schema of all possible events",
        "description" : "Retrieve a JSON schema describing a tree-structured collection of all possible events delivered by this Trigger type.",
        "operationId" : "eventMetadata",
        "parameters" : [ {
          "name" : "triggerType",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains JSON-schema event metadata.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Trigger Type was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/trigger/types/{triggerType}/inputMetadata" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve a JSON schema of the required input",
        "description" : "Retrieve JSON schema format metadata describing the input required on Rule activation.",
        "operationId" : "triggerMetadata",
        "parameters" : [ {
          "name" : "triggerType",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains JSON schema format metadata.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Trigger Type was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}" : {
      "put" : {
        "tags" : [ "Rules" ],
        "summary" : "Modify an existing Rule",
        "description" : "Modify an existing Rule. Only Rules whose state is not enabled can be modified. After a Rule is modified, any information related to its previous execution (e.g. launched Tasks, number of involved, finished Devices, etc.) will be cleared.",
        "operationId" : "modify",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Modifies the Rule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RuleInfo"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "The Rule was successfully modified.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Rules" ],
        "summary" : "Delete the Rule",
        "description" : "Delete the Rule with the specified <code>ruleId</code>. If the Rule could not be found or requester has insufficient permissions to access it, а <code>204 No Content </code>will be returned.",
        "operationId" : "deleteRule",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Rule was successfully deleted.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/action" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve the Rule action",
        "description" : "Retrieve the Groovy script defining the action for this Rule.",
        "operationId" : "action",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Rule action was successfully retrieved.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/devices" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve a list of all involved Devices",
        "description" : "Retrieve a list of all Devices which are involved in this Rule and satisfy the applied <code>stateFilter</code>. A Device is considered involved in the Rule if it is involved in at least one Task launched by that Rule.<p> <h4>Available stateFilter values:</h4> <ui><li><tt> FINISHED_SUCCESS(0) : Retrieve only Devices that have finished with a success state</tt></li>  <li><tt> FINISHED_WARNING(1) : Retrieve only Devices that have finished the execution with a warning state</tt></li> <li><tt> FINISHED_ERROR(2) : Retrieve only Devices that have finished the execution with an error state</tt></li> <li><tt> FINISHED_CANCELED(3) : Retrieve only devices that have finished the execution with a canceled state</tt></li> <li><tt> RUNNING(4) : Retrieve only Devices that have a running state</tt></li>  <li><tt>FINISHED(64): This value unites all FINISHED_xxx values and could be used only as a parameter for filtering</tt></li><li><tt>ANY(128): Retrieve all involved devices, regardless of the completion state",
        "operationId" : "listDevicesForRule",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stateFilter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "FINISHED_SUCCESS", "FINISHED_WARNING", "FINISHED_ERROR", "FINISHED_CANCELED", "RUNNING", "FINISHED", "ANY" ]
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains all Devices involved in the Rule.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Rules" ],
        "summary" : "Retry the Rule over the Devices whose state satisfies the applied stateFilter",
        "description" : "Retry the Rule over the Devices whose state satisfies the applied <code>stateFilter</code>. 'Once Per Device' option must be selected for the Rule.",
        "operationId" : "retryDevices",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stateFilter",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "SUCCESS", "WARNING", "ERROR", "CANCELED", "RUNNING" ]
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The successfully completed request contains 204 (NO_CONTENT).",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/devices/{deviceId}" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve the execution status of a specified Device within the Rule",
        "description" : "Retrieve the execution status of a specified Device within the Rule.",
        "operationId" : "ruleDevice",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the DeviceRuleStatus.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule or Device with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Rules" ],
        "summary" : "Retry the Rule over the Device",
        "description" : "Retry the Rule over the Device with the specified <code>deviceId</code>. 'Once Per Device' option must be selected for the Rule.",
        "operationId" : "retryDevice",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The successfully completed request contains 204 (NO_CONTENT)",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule or Device with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/devices/{deviceId}/tasks" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve all Tasks launched by the Rule which involve a specified Device",
        "description" : "Retrieve all Tasks launched by the Rule which involve a specified Device. Limited amount of data is retrieved, by default on a page with 20 elements.<p> <h4>Available stateFilter values:</h4> <ui><li><tt> FINISHED_SUCCESS(0) : Retrieve only Devices that have finished with a success state</tt></li>  <li><tt> FINISHED_WARNING(1) : Retrieve only Devices that have finished the execution with a warning state</tt></li> <li><tt> FINISHED_ERROR(2) : Retrieve only Devices that have finished the execution with an error state</tt></li> <li><tt> FINISHED_CANCELED(3) : Retrieve only devices that have finished the execution with a canceled state</tt></li> <li><tt> RUNNING(4) : Retrieve only Devices that have a running state</tt></li>  <li><tt>FINISHED(64): This value unites all FINISHED_xxx values and could be used only as a parameter for filtering</tt></li><li><tt>ANY(128): Retrieve all involved devices, regardless of the completion state",
        "operationId" : "listTasksForDeviceInRule",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stateFilter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "FINISHED_SUCCESS", "FINISHED_WARNING", "FINISHED_ERROR", "FINISHED_CANCELED", "RUNNING", "FINISHED", "ANY" ]
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains Tasks.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule or Device with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/options" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve the Rule execution options",
        "description" : "Retrieve the execution options of the Rule with the specified <code>ruleId</code>.",
        "operationId" : "options",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the execution options of the Rule.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/properties" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Get the custom Rule properties",
        "description" : "Get the custom properties of the Rule with the specified <code>ruleId</code>.",
        "operationId" : "properties",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the custom Rule properties.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Rules" ],
        "summary" : "Set custom Rule properties",
        "description" : "Set custom properties of the Rule with the specified <code>ruleId</code>. If <tt> append </tt> is <tt> true</tt> the supplied properties will be appended/added to any properties currently existing for  this Rule, otherwise any existing properties will be fully replaced by the newly set ones.",
        "operationId" : "setProperties",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Set or add rule properties",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Properties"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "The Rule properties were successfully set.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/scope" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve the Rule scope",
        "description" : "Retrieve the scope of an existing Rule identified by the specified <code>ruleId</code>.",
        "operationId" : "scope",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Rule scope was successfully retrieved.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/state" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve the Rule state",
        "description" : "Retrieve the state of the Rule with the specified <code>ruleId</code>.",
        "operationId" : "state",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the Rule state.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Rules" ],
        "summary" : "Enable or disable the Rule",
        "description" : "Enable or disable the Rule with the specified <code>ruleId</code>.",
        "operationId" : "setState",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "ENABLE", "DISABLE", "DISABLE_CANCEL_TASKS" ]
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Rule state was successfully changed.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/status" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve a Rule",
        "description" : "Retrieve a Rule by a specified <code>ruleId</code>.",
        "operationId" : "rule",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "statistic",
          "in" : "query",
          "description" : "Load statistic",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains an already existing Rule.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RuleStatusInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/rules/{ruleId}/tasks" : {
      "get" : {
        "tags" : [ "Rules" ],
        "summary" : "Retrieve all Tasks launched by the Rule",
        "description" : "Retrieve all Tasks launched by the Rule. By default, only a limited amount of data is retrieved on a page with 20 elements.",
        "operationId" : "tasks",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "An RQL filter over the Task attributes.<h5></tt><br/>The attribute names in the filtering conditions can be some of:</h5> <ui><tt><li/><b>state</b> - integer value corresponding to the Task state as follows: </tt> <br/><br/><tt>1 - RUNNING </tt><br/><tt> 2 - FINISHED</tt> <br/><tt>3 - FAILED_TO_LAUNCH</tt> <li/><tt><b>stateDescription</b> - string value corresponding to the state description </tt><li/><tt><b> involvedCount</b> - integer value corresponding to the the number of involved Devices in the Task.</tt> <li/><tt><b> successCount</b> - integer value corresponding to the the number of successfully finished Devices in the Task</tt><li/><tt><b>warningCount</b> - integer value corresponding the the number of Devices finished with warning in the Task </tt><li/><tt><b> errorCount</b> - integer value corresponding to the the number of Devices finished with error in the Task.</tt> <li/><tt><b>cancelCount</b> - integer value corresponding to the the number of Devices finished with warning in the Task.</tt><li/><tt><b>launchTime</b> - long value corresponding to the Task launch time given as milliseconds since 1 Jan 1970</tt><li/><tt><b>finishTime</b> - long value corresponding to the Task finish time given as milliseconds since 1 Jan 1970</tt><li/><tt><b>isPaused</b> - boolean value that is <code>true</code> when the execution is paused due to time constraint restrictions </tt><li/><tt><b>nextResume</b> - corresponds to resume time (in milliseconds since 1 Jan 1970) if the Task is currently paused </tt><li/><tt><b>nextPause</b> - corresponds to the next pause time (in milliseconds since 1 Jan 1970) if the Task is currently not paused </tt><li/><tt><b>taskId</b> - string value corresponding to the Task id</tt><li/><tt><b>ruleId</b> - string value corresponding to the Rule id if the Task is launched by a Rule trigger</tt><li/><tt><b>user</b> -string value corresponding to the user name of the user that has launched the Task<li/><tt><b>action</b> - string value corresponding to a textual representation of the searched action</tt><li/><tt><b>displayName</b> - string value corresponding the Task display name</tt><h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only Tasks with the specified properties are returned.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(state,\"0\")</tt></li><li><tt>and(eq(involvedCount,2),eq(state,0))</tt></li></ui>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains Tasks.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Rules" ],
        "summary" : "Fire the Rule manually",
        "description" : "Fire the Rule with the specified <code>ruleId</code> manually.",
        "operationId" : "fire",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Rule was successfully fired.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Rule with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve all Tasks",
        "description" : " Retrieve all available Tasks that satisfy the filtering criteria.",
        "operationId" : "tasks_1",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "An RQL filter over the Task attributes.<h5></tt><br/>The attribute names in the filtering conditions can be some of:</h5> <ui><tt><li/><b>state</b> - integer value corresponding to the Task state as follows: </tt> <br/><br/><tt>1 - RUNNING </tt><br/><tt> 2 - FINISHED</tt> <br/><tt>3 - FAILED_TO_LAUNCH</tt> <li/><tt><b>stateDescription</b> - string value corresponding to the state description </tt><li/><tt><b> involvedCount</b> - integer value corresponding to the the number of involved Devices in the Task.</tt> <li/><tt><b> successCount</b> - integer value corresponding to the the number of successfully finished Devices in the Task</tt><li/><tt><b>warningCount</b> - integer value corresponding the the number of Devices finished with warning in the Task </tt><li/><tt><b> errorCount</b> - integer value corresponding to the the number of Devices finished with error in the Task.</tt> <li/><tt><b>cancelCount</b> - integer value corresponding to the the number of Devices finished with warning in the Task.</tt><li/><tt><b>launchTime</b> - long value corresponding to the Task launch time given as milliseconds since 1 Jan 1970</tt><li/><tt><b>finishTime</b> - long value corresponding to the Task finish time given as milliseconds since 1 Jan 1970</tt><li/><tt><b>isPaused</b> - boolean value that is <code>true</code> when the execution is paused due to time constraint restrictions </tt><li/><tt><b>nextResume</b> - corresponds to resume time (in milliseconds since 1 Jan 1970) if the Task is currently paused </tt><li/><tt><b>nextPause</b> - corresponds to the next pause time (in milliseconds since 1 Jan 1970) if the Task is currently not paused </tt><li/><tt><b>taskId</b> - string value corresponding to the Task id</tt><li/><tt><b>ruleId</b> - string value corresponding to the Rule id if the Task is launched by a Rule trigger</tt><li/><tt><b>user</b> -string value corresponding to the user name of the user that has launched the Task<li/><tt><b>action</b> - string value corresponding to a textual representation of the searched action</tt><li/><tt><b>displayName</b> - string value corresponding the Task display name</tt><h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only Tasks with the specified properties are returned.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(state,\"0\")</tt></li><li><tt>and(eq(involvedCount,2),eq(state,0))</tt></li></ui>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Retrieve all Tasks",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Launch a Task",
        "description" : "Launch a Task with the specified attributes - <code>displayName</code>, <code>scope</code>, <code>options</code> and <code>action</code>. The displayName, scope, and action are required.",
        "operationId" : "launchTask",
        "requestBody" : {
          "description" : "Launch new task",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RestTaskInfo"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The Task was successfully launched.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskStatusInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/devices/{deviceId}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve all Tasks and respective execution status for a particular Device",
        "description" : "Retrieve all Tasks and respective execution status for a particular Device, which  satisfies the applied state filter. The <code>freeTasks</code> value of <tt>true</tt> specifies that only Task executions not launched by any Rule should be retrieved, whereas the value of <tt>false</tt> specifies that all Task executions will be retrieved (including those launched by Rules).<p><h4>Available stateFilter values:</h4> <ui><li><tt> FINISHED_SUCCESS(0) : Retrieve only Devices that have finished the Task execution with a sucess state</tt></li>  <li><tt> FINISHED_WARNING(1) : Retrieve only Devices that have finished the Task execution with a warning state</tt></li> <li><tt> FINISHED_ERROR(2) : Retrieve only Devices that have finished the Task execution with an error state</tt></li> <li><tt> FINISHED_CANCELED(3) : Retrieve only Devices that have finished the Task execution with a canceled state</tt></li> <li><tt> RUNNING(4) : Retrieve only Devices that have finished the Task execution with a running state</tt></li>  <li><tt>FINISHED(64): This value unites all FINISHED_xxx values and could be used only as parameter for filtering</tt></li><li><tt>ANY(128): Retrieve all involved Devices, regardless of the completion sate",
        "operationId" : "listTasksForDevice",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stateFilter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "FINISHED_SUCCESS", "FINISHED_WARNING", "FINISHED_ERROR", "FINISHED_CANCELED", "RUNNING", "FINISHED", "ANY" ]
          }
        }, {
          "name" : "freeTasks",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the specific page with DeviceTaskStatus.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/devices/{deviceId}/items" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve all Execution Items for a device",
        "description" : "Retrieve all Execution Items for a specific Device.",
        "operationId" : "listExecutionsForDevice",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stateFilter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "FINISHED_SUCCESS", "FINISHED_WARNING", "FINISHED_ERROR", "FINISHED_CANCELED", "RUNNING", "FINISHED", "ANY" ]
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains all Execution Items for the specified device.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}" : {
      "delete" : {
        "tags" : [ "Tasks" ],
        "summary" : "Delete a Task",
        "description" : "Delete the Task with the specified <code>taskId</code>. If the Task could not be found or requester has insufficient permissions to access it, а <code>204 No Content</code> will be returned.",
        "operationId" : "deleteTask",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Task was successfully deleted.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}/action" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve the Task action",
        "description" : "Retrieve the Groovy script defining the action for this Task.",
        "operationId" : "action_1",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Task action was successfully retrieved.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}/devices" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve all Devices involved in this Task",
        "description" : "Retrieve all Devices which are involved in this Task and have the specified execution state. The <code>stateFilter</code> is a filter on the execution state of the retrieved involved devices.<p><h4>Available stateFilter values:</h4> <ui><li><tt> FINISHED_SUCCESS(0) : Retrieve only Devices that have finished the Task execution with a sucess state</tt></li>  <li><tt> FINISHED_WARNING(1) : Retrieve only Devices that have finished the Task execution with a warning state</tt></li> <li><tt> FINISHED_ERROR(2) : Retrieve only Devices that have finished the Task execution with an error state</tt></li> <li><tt> FINISHED_CANCELED(3) : Retrieve only Devices that have finished the Task execution with a canceled state</tt></li> <li><tt> RUNNING(4) : Retrieve only Devices that have finished the Task execution with a running state</tt></li>  <li><tt>FINISHED(64): This value unites all FINISHED_xxx values and could be used only as parameter for filtering</tt></li><li><tt>ANY(128): Retrieve all involved Devices, regardless of the completion sate",
        "operationId" : "listDevicesForTask",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stateFilter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "FINISHED_SUCCESS", "FINISHED_WARNING", "FINISHED_ERROR", "FINISHED_CANCELED", "RUNNING", "FINISHED", "ANY" ]
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible values for the parameter:</p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the state of Devices in the scope of a Task.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retry a Task over a particular Devices",
        "description" : "Retry the Task over the Devices whose status satisfies the applied state filter. Retrying forces: <ui><li><tt>partial executions that are not finished to be canceled</tt></li><li><tt>all previous execution info for these Devices within the Task to be deleted</tt></li><li><tt>the action script of the Task to be run again for these Devices</tt></li>",
        "operationId" : "retryDevices_1",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "stateFilter",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "SUCCESS", "WARNING", "ERROR", "CANCELED", "RUNNING" ]
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The successfully completed request contains 204 (NO_CONTENT).",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}/devices/{deviceId}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve the Device task status in the scope of a Task",
        "description" : "Retrieve the Device task status of a particular Device in the scope of a Task.",
        "operationId" : "taskDevice",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the DeviceTaskStatus in the scope of a Task.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task or Device with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retry the Task over a Device",
        "description" : "Retry the Task over the Device with the specified <code>deviceId</code>. Retrying forces: <ui><li><tt>partial executions that are not finished to be canceled</tt></li><li><tt>all previous execution info for this Device within the Task to be deleted</tt></li><li><tt>the action script of the Task to be run again for this Device</tt></li>",
        "operationId" : "retryDevice_1",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The successfully completed request contains 204 (NO_CONTENT).",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task or Device with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}/devices/{deviceId}/state" : {
      "put" : {
        "tags" : [ "Tasks" ],
        "summary" : "Cancel the execution of this Task over a Device",
        "description" : "Cancel the execution of this Task over a Device",
        "operationId" : "cancelDeviceInTask",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The execution of the Task was successfully canceled.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task or Device with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}/options" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve the execution options of the Task",
        "description" : "Retrieve the execution options of the Task by the specified <code>taskId</code>.",
        "operationId" : "options_1",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the execution options of the Task.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}/properties" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Get the custom properties assigned to this Task",
        "description" : "Get the custom properties assigned to the Task with the specified <code>taskId</code>.",
        "operationId" : "properties_1",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the custom Task properties.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Set custom Task properties",
        "description" : "Set custom properties to the Task with the specified <code>taskId</code>. If <tt> append </tt> is <tt> true</tt>, the supplied properties will be appended/added to any properties currently existing for  this Task, otherwise any existing properties will be fully replaced by the supplied ones.",
        "operationId" : "setProperties_1",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Set or add Task properties",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Properties"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "The Task properties were successfully set.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}/rule" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve the Rule which launched this Task",
        "description" : "Retrieve the Rule which launched this Task or <code>204(NO_CONTENT)</code> if Task was manually launched.",
        "operationId" : "rule_1",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Rule was successfully retrieved.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}/scope" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve the Task scope",
        "description" : "Retrieve the scope of the Task with the specified <code>taskId</code>.",
        "operationId" : "scope_1",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Task scope was successfully retrieved.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{taskId}/state" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve the state of the Task",
        "description" : "Retrieve the state of the Task with the specified <code>taskId</code>.",
        "operationId" : "state_1",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains the state of the Task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tasks" ],
        "summary" : "Cancel the execution of this Task",
        "description" : "Cancel the execution of the Task by the specified <code>taskId</code>. If the Task could not be found or requester has insufficient permissions to access it, а <code>204 No Content</code> will be returned.",
        "operationId" : "cancel",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Cancel the execution of the Task by the specified <code>taskId</code>. If the Task could not be found or requester has insufficient permissions to access it, а <code>204 No Content</code> will be returned.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/mme/tasks/{tasksId}/status" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Retrieve a Task status",
        "description" : "Retrieve a Task status by a specified <code>taskId</code>.",
        "operationId" : "status",
        "parameters" : [ {
          "name" : "tasksId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains an existing Task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskStatusInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization to perform the requested operation on the given resource",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Task with the given ID was not found.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error was encountered and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/di/devices" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve all Devices",
        "description" : "Retrieve a list of devices matching the given filter. Optionally, you can also use field.selectors (see parameter fields) to get only the specified fields.",
        "operationId" : "devices_1",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only devices with the specified properties are returned. For example, the filter ne(attributes/owner, \"SID123\") will only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},\"value\")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId}, value)</tt></li><li><tt>and(eq(attributes/{attributeId1},\"value\"),eq(attributes/{attributeId2},\"value\"))</tt></li></ui><b>Filters containing a wildcard * symbol at the beginning can slow down your search request.</b>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespaces",
          "in" : "query",
          "description" : "A comma separated list of namespaces. This list is used to limit the query to things in the given namespaces only. If this parameter is omitted, all registered namespaces of your solution will be queried.<h4>Examples:</h4><ul><li><tt>?namespaces=com.example.namespace</tt></li><li><tt>?namespaces=com.example.namespace1,com.example.namespace2</tt></li><li><tt>?fields=deviceId,attributes/location/longitude,attributes/address(city,street)</tt></li></ul>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Contains a comma separated list of fields to be included in the returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several attribute paths can be passed as a comma separated list of JSON pointers (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt> would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with /) to select </li><li>sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses ( ) after a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The existing and readable Devices are successfully retrieved. The filter supports a limit option, which if not specified explicitly returns a default count of 25 devices. Maximum list size is 200.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Device"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/count" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve the number of Devices matching the given filter",
        "description" : "Retrieve the number of devices matching the given filter.",
        "operationId" : "devicesCount",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only devices with the specified properties are returned. For example, the filter ne(attributes/owner, \"SID123\") will only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},\"value\")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId}, value)</tt></li><li><tt>and(eq(attributes/{attributeId1},\"value\"),eq(attributes/{attributeId2},\"value\"))</tt></li></ui><b>Filters containing a wildcard * symbol at the beginning can slow down your search request.</b>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number of devices matching the given filter was successfully retrieved.",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/{deviceId}" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve an existing Device identified by the given deviceId",
        "description" : "Retrieve an existing Device identified by the given <code>deviceId</code>.",
        "operationId" : "device",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The specific Device was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Device"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Devices" ],
        "summary" : "Register a specific Device",
        "description" : "Register a specific Device.",
        "operationId" : "register",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Registration info",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegisterInfo"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The device was successfully registered.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Property"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Devices" ],
        "summary" : "Unregister a specific Device",
        "description" : "Unregister a specific Device.",
        "operationId" : "unregister",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "Device ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keepCredentials",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "keepPolicy",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The device was successfully unregistered.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Property"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/{deviceId}/attributes" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "List all Attributes of a specific Device",
        "description" : "List all Attributes of a specific Device",
        "operationId" : "listAttributes",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Attributes of the specific Device were successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Attribute"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Devices" ],
        "summary" : "Add Attribute of a specific Device",
        "description" : "Add Attribute of the specific Device. If an attribute with the same path already exists it will be overwritten.",
        "operationId" : "setAttribute",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Directory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Attribute"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The Attribute of the specific Device was successfully added.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Devices" ],
        "summary" : "Add Attributes of a specific Device",
        "description" : "Add Attributes of the specific Device. All previously existing attributes will be overwritten.",
        "operationId" : "createAttributes",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "List of Attributes",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AttributeObject"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The Attributes of the specific Device were successfully added.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Devices" ],
        "summary" : "Delete Attributes of a specific Device",
        "description" : "Delete Attributes of a specific Device",
        "operationId" : "deleteAttributes",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Attributes of the specific Device were successfully deleted."
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/{deviceId}/attributes/{attributePath}" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve a specific Attribute of a specific device",
        "description" : "Retrieve a specific Attribute of the device, identified by the <code>deviceId</code> path parameter. The Attribute (JSON) can be referenced hierarchically by applying a JSON Pointer notation (RFC-6901), e.g.: /devices/{deviceId}/attributes/house/room in order to retrieve the house field of an room object.",
        "operationId" : "attribute",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributePath",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Attributes of the specific Device were successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Devices" ],
        "summary" : "Delete Attribute of a specific Device",
        "description" : "Delete Attribute of a specific Device",
        "operationId" : "deleteAttribute",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributePath",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Attribute of the specific Device was successfully deleted."
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/{deviceId}/features" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "List all Features of a specific device",
        "description" : "Retrieve all Features of the Device identified by the <code>deviceId</code> path parameter.",
        "operationId" : "features",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of Features of the specific Device was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Feature"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/{deviceId}/features/{featureId}" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve a Feature of a Device",
        "description" : "Retrieve a Feature of the Device identified by the deviceId path parameter.",
        "operationId" : "feature",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Feature was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Feature"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/{deviceId}/features/{featureId}/definitions" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "List all Definitions of a Feature",
        "description" : "List all Definitions of the Feature identified by the <code>deviceId</code> and <code>featureId</code> path parameter.",
        "operationId" : "definitions",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of Definitions Features of the specific feature and device were successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FeatureDefinition"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/{deviceId}/features/{featureId}/definitions/{fullyQualifiedIdentifier}" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve the Definition of a Feature",
        "description" : "Retrieve the complete Definition of the Feature identified by the <code>deviceId</code>, <code>featureId</code> and <code>fullyQualifiedIdentifier<code>.",
        "operationId" : "definition",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fullyQualifiedIdentifier",
          "in" : "path",
          "description" : " Pattern: ([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+):([_a-zA-Z0-9\\-.]+)\n\n  A single fully qualified identifier of a Feature Definition in the form 'namespace:name:version'",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Definition was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FeatureDefinition"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/{deviceId}/features/{featureId}/properties" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "List the Properties of a Feature",
        "description" : "Retrieve the complete Properties of the Feature identified by the <code>deviceId</code> and <code>featureId</code> path parameter.",
        "operationId" : "featureProperties",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Properties were successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Property"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/devices/{deviceId}/features/{featureId}/properties/{propertyName}" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve the Property of a Feature",
        "description" : "Retrieve the complete Property of the Feature identified by the <code>deviceId</code> and <code>featureId</code> path parameter.",
        "operationId" : "property",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "featureId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "propertyName",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Property was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Property"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/gateways" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve all Gateways",
        "description" : "Retrieve a list of gateways matching the given filter. Optionally, you can also use field selectors (see parameter fields) to get only specified fields.",
        "operationId" : "gateways",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only devices with the specified properties are returned. For example, the filter ne(attributes/owner, \"SID123\") will only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},\"value\")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId}, value)</tt></li><li><tt>and(eq(attributes/{attributeId1},\"value\"),eq(attributes/{attributeId2},\"value\"))</tt></li></ui><b>Filters containing a wildcard * symbol at the beginning can slow down your search request.</b>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespaces",
          "in" : "query",
          "description" : "A comma separated list of namespaces. This list is used to limit the query to things in the given namespaces only. If this parameter is omitted, all registered namespaces of your solution will be queried.<h4>Examples:</h4><ul><li><tt>?namespaces=com.example.namespace</tt></li><li><tt>?namespaces=com.example.namespace1,com.example.namespace2</tt></li><li><tt>?fields=deviceId,attributes/location/longitude,attributes/address(city,street)</tt></li></ul>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Contains a comma separated list of fields to be included in the returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several attribute paths can be passed as a comma separated list of JSON pointers (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt> would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with /) to select </li><li>sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses ( ) after a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The existing and readable Gateways are successfully retrieved. The filter supports a limit option and if not explicitly specified, a default count of 25 devices are returned. Maximum list size is 200.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Gateway"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/gateways/count" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve the number of gateways matching the given filter",
        "description" : "Retrieve the number of gateways matching the given filter.",
        "operationId" : "gatewaysCount",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only devices with the specified properties are returned. For example, the filter ne(attributes/owner, \"SID123\") will only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},\"value\")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId}, value)</tt></li><li><tt>and(eq(attributes/{attributeId1},\"value\"),eq(attributes/{attributeId2},\"value\"))</tt></li></ui><b>Filters containing a wildcard * symbol at the beginning can slow down your search request.</b>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number of gateways matching the given filter was successfully retrieved",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/gateways/{gatewayId}" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve an existing Gateway identified by the given gatewayId",
        "description" : "Retrieve an existing Gateway identified by the given gatewayId.",
        "operationId" : "gateway",
        "parameters" : [ {
          "name" : "gatewayId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Gateway was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Gateway"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/gateways/{gatewayId}/devices" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve a list of Edge Devices attached to the gateway",
        "description" : "Retrieve a list of edge devices attached to the gateway identified by <code>gatewayId</code> and matching the given filter. Optionally, you can also use field selectors (see parameter fields) to get only the specified fields.",
        "operationId" : "devices",
        "parameters" : [ {
          "name" : "gatewayId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only devices with the specified properties are returned. For example, the filter ne(attributes/owner, \"SID123\") will only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},\"value\")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId}, value)</tt></li><li><tt>and(eq(attributes/{attributeId1},\"value\"),eq(attributes/{attributeId2},\"value\"))</tt></li></ui><b>Filters containing a wildcard * symbol at the beginning can slow down your search request.</b>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespaces",
          "in" : "query",
          "description" : "A comma separated list of namespaces. This list is used to limit the query to things in the given namespaces only. If this parameter is omitted, all registered namespaces of your solution will be queried.<h4>Examples:</h4><ul><li><tt>?namespaces=com.example.namespace</tt></li><li><tt>?namespaces=com.example.namespace1,com.example.namespace2</tt></li><li><tt>?fields=deviceId,attributes/location/longitude,attributes/address(city,street)</tt></li></ul>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Contains a comma separated list of fields to be included in the returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several attribute paths can be passed as a comma separated list of JSON pointers (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt> would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with /) to select </li><li>sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses ( ) after a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of existing and readable edge devices attached to the gateway is successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Device"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/gateways/{gatewayId}/devices/count" : {
      "get" : {
        "tags" : [ "Devices" ],
        "summary" : "Retrieve the number of Devices matching the given filter",
        "description" : "Retrieve the number of devices matching the given filter.",
        "operationId" : "devicesCount_1",
        "parameters" : [ {
          "name" : "gatewayId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only devices with the specified properties are returned. For example, the filter ne(attributes/owner, \"SID123\") will only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},\"value\")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId}, value)</tt></li><li><tt>and(eq(attributes/{attributeId1},\"value\"),eq(attributes/{attributeId2},\"value\"))</tt></li></ui><b>Filters containing a wildcard * symbol at the beginning can slow down your search request.</b>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The number of devices matching the given filter was successfully retrieved.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/directories" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "List all Directories",
        "description" : "Retrieve a list of directories matching the given filter. Optionally, you can also use field selectors (see parameter fields) to get only the specified fields.",
        "operationId" : "directories",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only directories with the specified properties are returned. For example, the filter ne(name, \"specifiedName\") will only return directories that do have the specifiedName name.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq({id},\"value\")</tt></li><li><tt>exists({path}, value)</tt></li><li><tt>and(eq({path},\"value\"),eq({name},\"value\"))</tt></li></ui><b>Filters containing a wildcard * symbol at the beginning can slow down your search request.</b>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The successfully completed request contains only existing and readable directories. The filter supports a limit option, which if not specified explicitly, returns a default count of 25 directories. Maximum list size is 200.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Directory"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Groups" ],
        "summary" : "Add a Directory to the directory hierarchy",
        "description" : "Add a directory to the directory hierarchy.",
        "operationId" : "createDirectory",
        "requestBody" : {
          "description" : "Directory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DirectoryParameters"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The directory was successfully added.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Directory"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The directory with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/directories/root" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Retrieve the Root Directory of the directory hierarchy",
        "description" : "Retrieve the root directory of the directory hierarchy. All directories, that have no parent directory assigned, are subdirectories of this directory.",
        "operationId" : "root",
        "responses" : {
          "200" : {
            "description" : "The root directory was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Directory"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/directories/{path}" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Retrieve an existing Directory from the groups hierarchy",
        "description" : "Retrieve an existing directory from the groups hierarchy.",
        "operationId" : "directory",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "description" : "The path of a directory in the directory tree",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The directory was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Directory"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The directory with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Delete an existing directory from the directory hierarchy",
        "description" : "Delete an existing directory from the directory tree. If the devices parameter's value is <code>true</code> the devices under the directory will be deleted as well, if the value is <code>false</code>, these devices will still be listed under the root, even after the directory is deleted.",
        "operationId" : "deleteDirectory",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "description" : "The path of a directory in the directory tree",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "devices",
          "in" : "query",
          "description" : "If the value of the members' parameter is <code>true</code> the members under the directory should be deleted as  well.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The directory was successfully deleted."
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The directory with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/directories/{path}/attributes" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "List all Attributes of a specific Directory",
        "description" : "The Attributes of the specific Directory were successfully retrieved.",
        "operationId" : "listAttributes_1",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Attributes of the specific Directory were successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Attribute"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Groups" ],
        "summary" : "Add Attribute of a specific Directory",
        "description" : "Add Attribute of the specific Directory. If an attribute with the same path already exists it will be overwritten.",
        "operationId" : "setAttribute_1",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Attribute",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Attribute"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The Attribute of the specific Directory was successfully added.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Directory"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Groups" ],
        "summary" : "Add Attributes of a specific Directory",
        "description" : "Add Attributes of the specific Directory. All previously existing attributes will be overwritten.",
        "operationId" : "createAttributes_1",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "List of Attributes",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AttributeObject"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The Attributes of the specific Directory were successfully added.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Directory"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Delete Attributes of a specific Directory",
        "description" : "Delete Attributes of a specific Directory",
        "operationId" : "deleteAttributes_1",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Attributes of the specific Directory were successfully deleted."
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/directories/{path}/attributes/{attributePath}" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Retrieve a specific Attribute of a specific device",
        "description" : "Retrieve a specific Attribute of the Directory, identified by the <code>path</code> parameter. The Attribute (JSON) can be referenced hierarchically by applying a JSON Pointer notation (RFC-6901), e.g.: /directories/{path}/attributes/house/room in order to retrieve the house field of an room object.",
        "operationId" : "attribute_1",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributePath",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Attributes of the specific Device were successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Delete Attribute of a specific Directory",
        "description" : "Delete Attribute of a specific Directory",
        "operationId" : "deleteAttribute_1",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributePath",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Attribute of the specific Directory was successfully deleted."
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/directories/{path}/directory/{targetParentPath}" : {
      "put" : {
        "tags" : [ "Groups" ],
        "summary" : "Move the Directory",
        "description" : "Moves the directory with a specific identifier to a target directory with the specified identifier.",
        "operationId" : "moveDirectory",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "description" : "The path of a directory in the directory tree",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "targetParentPath",
          "in" : "path",
          "description" : "The path of the parent directory, the directory will be moved to",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The directory was successfully moved.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The directory, tag, device or gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/directories/{path}/members" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Retrieve a list of Members",
        "description" : "Retrieve a list of members(Gateways or Devices) that match the given filter.",
        "operationId" : "directoryMembers",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "description" : "The path of a directory in the directory tree",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "devices",
          "in" : "query",
          "description" : "If the value is <b>true</b>, the members are devices, if it is <b>false</b>, the members are gateways.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "recursive",
          "in" : "query",
          "description" : "If the value is <b>true</b>, all members will be listed (including sub-directories' gateways or devices), if <b>false</b>, only members directly under this directory will be listed.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "<h4>Filter operations:</h4><ui><li><tt>eq({property},{value})</tt></li><li><tt>ne({property},{value})</tt></li><li><tt>gt({property},{value})</tt></li><li><tt>ge({property},{value})</tt></li><li><tt>lt({property},{value})</tt></li><li><tt>le({property},{value})</tt></li><li><tt>in({property},{value},{value},...)</tt></li><li><tt>like({property},{value})</tt></li><li><tt>exists({property})</tt></li></ui>Note: When using filter operations, only devices with the specified properties are returned. For example, the filter ne(attributes/owner, \"SID123\") will only return devices that do have the owner attribute.<h4>Logical operations:</h4><ui><li><tt>and({query},{query},...)</tt></li><li><tt>or({query},{query},...)</tt></li><li><tt>not({query})</tt></li></ui><h5>Examples:</h5><ui><li><tt>eq(attributes/{attributeId},\"value\")</tt></li><li><tt>exists(features/{featureId}/properties/{category}/{propertyId}, value)</tt></li><li><tt>and(eq(attributes/{attributeId1},\"value\"),eq(attributes/{attributeId2},\"value\"))</tt></li></ui><b>Filters containing a wildcard * symbol at the beginning can slow down your search request.</b>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespaces",
          "in" : "query",
          "description" : "A comma separated list of namespaces. This list is used to limit the query to things in the given namespaces only. If this parameter is omitted, all registered namespaces of your solution will be queried.<h4>Examples:</h4><ul><li><tt>?namespaces=com.example.namespace</tt></li><li><tt>?namespaces=com.example.namespace1,com.example.namespace2</tt></li><li><tt>?fields=deviceId,attributes/location/longitude,attributes/address(city,street)</tt></li></ul>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "description" : "<p>Possible parameter values:</p><h5>Sort operations</h5><ul><li><tt>sort([+|-]{property})</tt></li><li><tt>sort([+|-]{property},[+|-]{property},...)</tt></li></ul><p><h5>Paging operations</h5><ul><li><tt>size({page-size}) Maximum allowed page size is 200. Default page size is 25.</tt></li><li><tt>cursor({cursor-id}) Start the search from the cursor location. Specify the cursor ID without quotation marks. Cursor IDs are given in search responses and mark the position after the last entry of the previous search. The meaning of cursor IDs is unspecified and may change without notice.</tt></li></ul><p><h4>Examples:</h4><ul><li><tt>sort(+id)</tt></li><li><tt>sort(-attributes/{attributePropertyValue})</tt></li><li><tt>size(10) return 10 results</tt></li><li><tt>cursor(LOREMIPSUM) return results after the position of the cursor LOREMIPSUM.</tt></li></ul><p><h5><b>Combine:</b></h5><p>If you need to specify multiple options, when using the swagger UI just write each option in a new line. When using the plain REST API programmatically, you will need to separate the options using a comma (,) character. size(200),cursor(LOREMIPSUM).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Contains a comma separated list of fields to be included in the returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several attribute paths can be passed as a comma separated list of JSON pointers (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt> would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with /) to select </li><li>sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses ( ) after a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of members was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Device"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The directory with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/directories/{path}/members/{memberId}" : {
      "put" : {
        "tags" : [ "Groups" ],
        "summary" : "Move the Device or Gateway to the target directory",
        "description" : "Move a Device or Gateway with a specific ID to the target directory with the specified ID.",
        "operationId" : "moveMember",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "description" : "The path of the parent directory, the device will be moved to",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Device or Gateway was successfully moved to the target directory.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The directory, tag, device or gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/directories/{path}/parent" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Retrieve the parent directory of this directory",
        "description" : "Retrieve the parent directory of this directory",
        "operationId" : "parent",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "description" : "The path of a directory in the directory tree",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The existing and readable parent directory is successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Directory"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The directory with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/tags" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Retrieve a list of Tags matching the specified filter",
        "description" : "Retrieve a list of Tags matching the specified filter",
        "operationId" : "tags",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of tags matching the specified filter was successfully retrieved. The filter supports a limit option, which if not specified explicitly returns a default count of 25 tags. Maximum list size is 200 tags.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : { }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : { }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Groups" ],
        "summary" : "Create a Tag",
        "description" : "Create a tag according to the specified parameters.",
        "operationId" : "createTag",
        "requestBody" : {
          "description" : "Create new tag",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Parameters"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The tag was successfully created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/tags/{name}" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Retrieve an existing Tag with a specified name",
        "description" : "Retrieve an existing Tag with a specified name",
        "operationId" : "tag",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The tag with the specified name was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The tag with the given name was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Delete a Tag",
        "description" : "Delete a tag with the specified name.",
        "operationId" : "deleteTag",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The tag was successfully deleted."
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The tag with the given name was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/tags/{name}/attributes" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "List all Attributes of a specific Tag",
        "description" : "The Attributes of the specific Tag were successfully retrieved.",
        "operationId" : "listTagAttributes",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Attributes of the specific Tag were successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Attribute"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Groups" ],
        "summary" : "Add Attribute of a specific Tag",
        "description" : "Add Attribute of the specific Tag. If an attribute with the same path already exists it will be overwritten. ",
        "operationId" : "setTagAttribute",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Attribute",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Attribute"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The Attribute of the specific Tag was successfully added.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Directory"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Groups" ],
        "summary" : "Add Attributes of a specific Tag",
        "description" : "Add Attributes of the specific Tag. All previously existing attributes will be overwritten.",
        "operationId" : "createTagAttributes",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "List of Attributes",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AttributeObject"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The Attributes of the specific Tag were successfully added.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Directory"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Add Attributes of a specific Tag",
        "description" : "Add Attributes of a specific Tag",
        "operationId" : "deleteTagAttributes",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Attributes of the specific Tag were successfully deleted."
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/tags/{name}/attributes/{attributePath}" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Retrieve a specific Attribute of a specific Tag",
        "description" : "Retrieve a specific Attribute of the Tag, identified by name. The Attribute (JSON) can be referenced hierarchically by applying a JSON Pointer notation (RFC-6901), e.g.: /tags/{name}/attributes/house/room in order to retrieve the house field of an room object.",
        "operationId" : "tagAttribute",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributePath",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Attribute of the specific Tag was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Groups" ],
        "summary" : "Add Attribute of a specific Tag",
        "description" : "Add Attribute of a specific Tag",
        "operationId" : "deleteTagAttribute",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributePath",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Attribute of the specific Tag was successfully deleted."
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) or does not conform to RFC-2396 (URI).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The Device or Gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/tags/{name}/members" : {
      "get" : {
        "tags" : [ "Groups" ],
        "summary" : "Retrieve a list of Members",
        "description" : "Retrieve a list of members(Gateways or Devices) that match the given filter.",
        "operationId" : "membersTag",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "devices",
          "in" : "query",
          "description" : "If the value is <b>true</b>, the members are devices, if it is <b>false</b>, the members are gateways.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "namespaces",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "option",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Contains a comma separated list of fields to be included in the returned JSON. Attributes can be selected in the same manner.<br><p><b>Selectable fields</b></p><ul><li><tt>ID</tt></li> <li><tt>policyId</tt></li><li><tt>attributes</tt><p>Supports selecting arbitrary sub-fields by using a comma separated list:</p><ul><li>several attribute paths can be passed as a comma separated list of JSON pointers (RFC-6901)<br><br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/{attributeValue}</tt> would select only attribute value (if present)</li><li><tt>?fields=attributes/{attributeId1}/{attributeValue},attributes/{attributeId2}/{attributeValue}</tt></li><li><tt>?fields=attributes/{attributeId1}/{attributeValue1},attributes/{attributeId1}/{attributeValue2}</tt></li></ul></li><li>a comma-separated list of sub-fields (a sub-field is a JSON pointer (RFC-6901) separated with /) to select </li><li>sub-selectors can be used to request only specific sub-fields by placing expressions in parentheses ( ) after a selected subfield<br><b>For example:</b><br><ul><li><tt>?fields=attributes/{attributeId}/(attributeValue1,attributeValue2)</tt></li></ul></li></ul></li><li><tt>features</tt><p>Supports selecting arbitrary fields in features similar to attributes</p><b>features/{featureId}/properties/{category}/{propertyId}</b></li></ul><h4>Examples:</h4><ul><li><tt>?fields=id,attributes,features</tt></li><li><tt>?fields=attributes/{attributeId1}(attributeValue1,attributeValue1),features</tt></li><li><tt>?fields=id,attributes/{attributeId1},features/{featureId}/properties/{category}/{propertyId}</tt></li></ul>",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of members was successfully retrieved.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Device"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The tag with the given name was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    },
    "/di/groups/tags/{name}/{memberId}" : {
      "put" : {
        "tags" : [ "Groups" ],
        "summary" : "Tag/Untag a Member of a Tag",
        "description" : "Tag/Untag a member with a specific ID i.e. attach/detach the tag with the specified ID from the member(gateway or device).",
        "operationId" : "tagMember",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "memberId",
          "in" : "path",
          "description" : "The memberId(of a device or gateway)",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "If the value is <b>true</b>, attaches the tag with the specified ID to the device, if <b>false</b>, detaches the tag with the specified ID from the device.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The member(gateway or device) was successfully tagged/untagged.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "The request could not be completed. The ID either does not contain the mandatory namespace prefix (java package notation + : colon) does not conform to RFC-2396 (URI)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "The request could not be completed due to missing authentication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "The request could not be completed due to missing authorization required for performing the requested operation on the given resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "The request could not be completed. The directory, tag, device or gateway with the given ID was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "An internal error has occurred and the request could not be completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorEntity"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ErrorEntity" : {
        "required" : [ "message", "statusCode", "uid" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "The message of the error"
          },
          "statusCode" : {
            "type" : "integer",
            "description" : "The HTTP status code of the error",
            "format" : "int32"
          },
          "errorCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "description" : {
            "type" : "string"
          },
          "UID" : {
            "type" : "string"
          }
        },
        "description" : "The advanced HTTP error response handling"
      },
      "ActionInfo" : {
        "required" : [ "actionDef", "actionType" ],
        "type" : "object",
        "properties" : {
          "actionType" : {
            "type" : "string",
            "description" : "The type of action used. All available action types can be listed through the method <code>ws/mme/rules/actions</code>",
            "example" : "groovy"
          },
          "actionDef" : {
            "type" : "string",
            "description" : "A JSON object, which should satisfy the metadata required for this action type. The metadata for the given action type is available through the method <code>ws/mme/rules/actions/{actionType}</code>",
            "example" : "{\"groovyScript\":\"write action script here ...\"}"
          }
        },
        "description" : "Groovy script and type defining the action for this Rule."
      },
      "DeviceScopeInfo" : {
        "required" : [ "groovySelection", "groupSelection", "idSelection" ],
        "type" : "object",
        "properties" : {
          "idSelection" : {
            "$ref" : "#/components/schemas/IdSelectionInfo"
          },
          "groovySelection" : {
            "$ref" : "#/components/schemas/GroovySelectionInfo"
          },
          "groupSelection" : {
            "$ref" : "#/components/schemas/GroupSelectionInfo"
          }
        },
        "description" : "The JSON Schema defines three pre-filled options in this order of priority - IdSelection, GroovySelection, GroupSelection - for defining Device Scope. Only one of them should be filled in. If several options are present - even if any of them is left empty or is invalid, all of them will be considered according to their order of priority."
      },
      "ExecOptInfo" : {
        "required" : [ "concurrencyLimit", "timeConstraint" ],
        "type" : "object",
        "properties" : {
          "overlapOption" : {
            "type" : "integer",
            "description" : "  Defines whether multiple Tasks over the same device can overlap or should be replaced. This option is applicable only for Rules. Overlapping: <li> ALLOW_OVERLAPPING_TASKS(0): No relation constraint between Tasks. New Tasks can be triggered, although old Tasks are still active. This option should be used very carefully due to possible accumulation (explosion) of unfinished Tasks. </li> <li>NO_OVERLAPPING_CANCEL_OLD(1) : In case of Rule firing for a particular device, any previous executions still running for this device in the scope of the same Rule will be canceled. </li><li> NO_OVERLAPPING_KEEP_OLD_SKIP_NEW(2): Skip triggering a new Task for devices that already have unfinished Tasks in the scope of the Rule.;",
            "format" : "int32",
            "example" : 1,
            "default" : 1,
            "enum" : [ 0, 1, 2 ]
          },
          "concurrencyLimit" : {
            "type" : "integer",
            "description" : "Restricts the maximum number of devices concurrently executing a Task or Rule.",
            "format" : "int32",
            "default" : -1
          },
          "concurrencyTimeout" : {
            "type" : "integer",
            "description" : "Timeout in seconds after which a non-confirmed execution expires and stops occupying room in the concurrency limit. The default value is 30 seconds.",
            "format" : "int32"
          },
          "oncePerDevice" : {
            "type" : "boolean",
            "description" : "If the Rule should be triggered no more than once for the same device, false otherwise",
            "default" : true
          },
          "autoDisable" : {
            "type" : "boolean",
            "description" : "If the Rule should be automatically disabled once all targets from the Scope pass through the triggering conditions, false otherwise",
            "default" : true
          },
          "timeConstraint" : {
            "type" : "string",
            "description" : "A time schedule in which the Task execution is permitted. The time schedule constraint must be provided as a cron expression. <code>Example:</code> <li/>* * 9-17 ? * MON-FRI: defines that the execution time will be on working days (Monday to Friday) between 9.00-17.00h<li/>* * 00-01 * * ?: defines that execution time will be every day between 00-01 in the morning.<li/>* * * 01 * ?: defines that execution time will be on the 1st day of each month ."
          }
        },
        "description" : "Execution options of this Rule"
      },
      "GroovySelectionInfo" : {
        "required" : [ "listingScript" ],
        "type" : "object",
        "properties" : {
          "listingScript" : {
            "type" : "string",
            "description" : "Custom Groovy listing script which dynamically includes devices in the selection"
          },
          "filteringScript" : {
            "type" : "string",
            "description" : "A custom Groovy filtering script which is used to narrow down the devices belonging to this selection. If present, only devices satisfying this script will be included in the selection."
          }
        },
        "description" : "A Dynamic selection of devices determined by a custom Groovy listing script."
      },
      "GroupSelectionInfo" : {
        "required" : [ "directoryPath" ],
        "type" : "object",
        "properties" : {
          "directoryPath" : {
            "type" : "string",
            "description" : "Path of the directory whose devices belong to this selection"
          },
          "recursive" : {
            "type" : "boolean",
            "description" : "Indicates whether devices from the entire subtree (true) or only direct members (false) of the given directory are included in this selection"
          },
          "gatewaysOnly" : {
            "type" : "boolean",
            "description" : "Indicates whether only gateways are included in this selection."
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tag names to further narrow down the selection - only devices belonging to the given directory and tagged with the given tags are included in this selection.",
            "items" : {
              "type" : "string",
              "description" : "List of tag names to further narrow down the selection - only devices belonging to the given directory and tagged with the given tags are included in this selection."
            }
          },
          "rqlQuery" : {
            "type" : "string",
            "description" : "RQL filter query which is used to narrow down the devices belonging to this selection. If present, only devices matching this query will be present in the selection."
          },
          "filteringScript" : {
            "type" : "string",
            "description" : "A custom Groovy filtering script which is used to narrow down the devices belonging to this selection. If present, only devices satisfying this script will be included in the selection."
          }
        },
        "description" : "A Selection composed of a group of devices."
      },
      "IdSelectionInfo" : {
        "required" : [ "deviceIds" ],
        "type" : "object",
        "properties" : {
          "deviceIds" : {
            "type" : "array",
            "description" : "Ids of the devices belonging to this selection",
            "items" : {
              "type" : "string",
              "description" : "Ids of the devices belonging to this selection"
            }
          }
        },
        "description" : "A Selection composed of a list of device ids."
      },
      "RuleInfo" : {
        "required" : [ "action", "displayName", "scope" ],
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "User-friendly display name of this Rule"
          },
          "scope" : {
            "$ref" : "#/components/schemas/ScopeInfo"
          },
          "trigger" : {
            "$ref" : "#/components/schemas/TriggerInfo"
          },
          "options" : {
            "$ref" : "#/components/schemas/ExecOptInfo"
          },
          "action" : {
            "$ref" : "#/components/schemas/ActionInfo"
          }
        }
      },
      "ScopeInfo" : {
        "required" : [ "deviceScope" ],
        "type" : "object",
        "properties" : {
          "systemScope" : {
            "type" : "boolean",
            "description" : "If System-scope the value is <code>true</code>, otherwise <code>false</code>",
            "default" : false
          },
          "deviceScope" : {
            "$ref" : "#/components/schemas/DeviceScopeInfo"
          }
        },
        "description" : "Scope info, generally divided into System-scope and Device-scope"
      },
      "TriggerElInfo" : {
        "type" : "object",
        "properties" : {
          "condition" : {
            "type" : "string",
            "description" : "A groovy script that will be executed and expected to return a boolean result or it might be a json query filter that will be matched against the Rule-fire event"
          },
          "triggerEvent" : {
            "$ref" : "#/components/schemas/TriggerEventInfo"
          }
        },
        "description" : "Should be a groovy script that could be evaluated to boolean value <code>true</code> or <code>false</code>."
      },
      "TriggerEventInfo" : {
        "required" : [ "activationParams", "mode" ],
        "type" : "object",
        "properties" : {
          "eventType" : {
            "type" : "string"
          },
          "mode" : {
            "type" : "string",
            "description" : "The trigger type - corresponding to a trigger provider available in the system",
            "example" : "event-driven (device.events.trigger), timer-driven (trigger.cron) or manual-fire (mme.manual.trigger)"
          },
          "activationParams" : {
            "type" : "string",
            "description" : "The input required by the respective trigger provider in order to start generating Rule firing events. For mme.manual.trigger mode this is not required"
          }
        },
        "description" : "Abstraction for event that fires a Rule"
      },
      "TriggerInfo" : {
        "required" : [ "triggerElements" ],
        "type" : "object",
        "properties" : {
          "generalCondition" : {
            "type" : "string",
            "description" : "Should be a groovy script that could be evaluated to boolean value <code>true</code> or <code>false</code>."
          },
          "triggerElements" : {
            "type" : "array",
            "description" : "Should be a groovy script that could be evaluated to boolean value <code>true</code> or <code>false</code>.",
            "items" : {
              "$ref" : "#/components/schemas/TriggerElInfo"
            }
          }
        }
      },
      "RuleStatusInfo" : {
        "required" : [ "action", "displayName", "involvedCount", "ruleId", "scope" ],
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "User-friendly display name of this Rule"
          },
          "ruleId" : {
            "type" : "string",
            "description" : "Rule identifier"
          },
          "state" : {
            "type" : "integer",
            "format" : "int32"
          },
          "stateDescription" : {
            "type" : "string"
          },
          "involvedCount" : {
            "type" : "integer",
            "description" : "The count of involved devices with the given execution status.",
            "format" : "int32"
          },
          "successCount" : {
            "type" : "integer",
            "description" : "The count of involved devices with FINISHED_SUCCESS(0) status.",
            "format" : "int32"
          },
          "warningCount" : {
            "type" : "integer",
            "description" : "The count of involved devices with  FINISHED_WARNING(1) status.",
            "format" : "int32"
          },
          "errorCount" : {
            "type" : "integer",
            "description" : "The count of involved devices with  FINISHED_ERROR(2) status.",
            "format" : "int32"
          },
          "cancelCount" : {
            "type" : "integer",
            "description" : "The count of involved devices with  FINISHED_CANCELED(3) status.",
            "format" : "int32"
          },
          "triggersCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "nextTimeTrigger" : {
            "type" : "integer",
            "format" : "int64"
          },
          "user" : {
            "type" : "string",
            "description" : "User"
          },
          "props" : {
            "type" : "array",
            "description" : "Custom properties assigned to this Rule.",
            "items" : {
              "type" : "string",
              "description" : "Custom properties assigned to this Rule.",
              "format" : "byte"
            }
          },
          "scope" : {
            "$ref" : "#/components/schemas/ScopeInfo"
          },
          "trigger" : {
            "$ref" : "#/components/schemas/TriggerInfo"
          },
          "options" : {
            "$ref" : "#/components/schemas/ExecOptInfo"
          },
          "action" : {
            "$ref" : "#/components/schemas/ActionInfo"
          },
          "fullStatus" : {
            "type" : "boolean"
          }
        }
      },
      "Properties" : {
        "type" : "object",
        "properties" : {
          "append" : {
            "type" : "boolean"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "TaskStatusInfo" : {
        "required" : [ "action", "finishTime", "involvedCount", "launchTime", "optInfo", "scopeInfo", "state", "stateDescription" ],
        "type" : "object",
        "properties" : {
          "taskId" : {
            "type" : "string",
            "description" : "Task identifier"
          },
          "ruleId" : {
            "type" : "string",
            "description" : "Rule identifier"
          },
          "state" : {
            "type" : "integer",
            "description" : "State of this Task",
            "format" : "int32"
          },
          "stateDescription" : {
            "type" : "string",
            "description" : "Description of the Task state."
          },
          "launchTime" : {
            "type" : "integer",
            "description" : "Task launch time",
            "format" : "int64"
          },
          "finishTime" : {
            "type" : "integer",
            "description" : "Task finish time",
            "format" : "int64"
          },
          "involvedCount" : {
            "type" : "integer",
            "description" : "Count of involved devices with given execution status in this Task.",
            "format" : "int32"
          },
          "successCount" : {
            "type" : "integer",
            "description" : "Count of involved devices with FINISHED_SUCCESS(0) status",
            "format" : "int32"
          },
          "warningCount" : {
            "type" : "integer",
            "description" : "Count of involved devices with FINISHED_WARNING(1) status",
            "format" : "int32"
          },
          "errorCount" : {
            "type" : "integer",
            "description" : "Count of involved devices with FINISHED_ERROR(2) status",
            "format" : "int32"
          },
          "cancelCount" : {
            "type" : "integer",
            "description" : "Count of involved devices with FINISHED_CANCELED(3) status",
            "format" : "int32"
          },
          "isPaused" : {
            "type" : "boolean"
          },
          "nextResume" : {
            "type" : "integer",
            "description" : "Time at which the execution will be resumed.",
            "format" : "int64"
          },
          "nextPause" : {
            "type" : "integer",
            "description" : "Time at which the execution will be paused.",
            "format" : "int64"
          },
          "user" : {
            "type" : "string",
            "description" : "User"
          },
          "props" : {
            "type" : "array",
            "description" : "Custom properties assigned to this Task.",
            "items" : {
              "type" : "string",
              "description" : "Custom properties assigned to this Task.",
              "format" : "byte"
            }
          },
          "scopeInfo" : {
            "$ref" : "#/components/schemas/ScopeInfo"
          },
          "optInfo" : {
            "$ref" : "#/components/schemas/ExecOptInfo"
          },
          "action" : {
            "$ref" : "#/components/schemas/ActionInfo"
          },
          "displayName" : {
            "type" : "string",
            "description" : "A User-friendly display name of this Task."
          },
          "ruleInfo" : {
            "$ref" : "#/components/schemas/RuleInfo"
          },
          "paused" : {
            "type" : "boolean",
            "description" : " Task execution is currently paused due to time-constraint restrictions."
          }
        }
      },
      "RestTaskInfo" : {
        "type" : "object",
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "User-friendly display name of this Task"
          },
          "action" : {
            "$ref" : "#/components/schemas/ActionInfo"
          },
          "scopeInfo" : {
            "$ref" : "#/components/schemas/ScopeInfo"
          },
          "optInfo" : {
            "$ref" : "#/components/schemas/TaskExecOptInfo"
          }
        }
      },
      "TaskExecOptInfo" : {
        "required" : [ "concurrencyLimit", "timeConstraint" ],
        "type" : "object",
        "properties" : {
          "concurrencyLimit" : {
            "type" : "integer",
            "description" : "Restricts the maximum number of devices concurrently executing a Task or Rule.",
            "format" : "int32",
            "default" : -1
          },
          "timeConstraint" : {
            "type" : "string",
            "description" : "Time-schedule is permitted for the Task to act. Time schedule constraint supplied as Cron-expression. <code>Example:</code> <li/>* * 9-17 ? * MON-FRI: defines work time to be on working days (Monday to Friday) between 9.00-17.00h<li/>* * 00-01 * * ?: defines work to be time every day between 00-01 in the morning.<li/>* * * 01 * ?: defines work time to be on the 1st day of each month ."
          }
        },
        "description" : "Execution options define execution behavior of Tasks and Rules"
      },
      "AttributeObject" : {
        "required" : [ "path", "value" ],
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "description" : "Attribute path"
          },
          "value" : {
            "type" : "object",
            "description" : "Attribute value"
          }
        }
      },
      "DefinitionIdentifier" : {
        "required" : [ "fullyQualifiedIdentifier", "name", "namespace", "version" ],
        "type" : "object",
        "properties" : {
          "namespace" : {
            "type" : "string",
            "description" : "Feature definition namespace"
          },
          "name" : {
            "type" : "string",
            "description" : "Feature definition name"
          },
          "version" : {
            "type" : "string",
            "description" : "Feature definition version"
          },
          "fullyQualifiedIdentifier" : {
            "type" : "string",
            "description" : "Feature definition namespace:name:value"
          }
        },
        "description" : "Feature definition identifiers"
      },
      "Device" : {
        "required" : [ "identifier" ],
        "type" : "object",
        "properties" : {
          "identifier" : {
            "$ref" : "#/components/schemas/Identifier"
          },
          "gatewayId" : {
            "type" : "string",
            "description" : "Gateway identifier this device is attached to"
          },
          "policyId" : {
            "type" : "string",
            "description" : "Policy identifier"
          },
          "revision" : {
            "type" : "integer",
            "description" : "Device revision",
            "format" : "int64"
          },
          "modified" : {
            "type" : "integer",
            "description" : "Modified timestamp",
            "format" : "int64"
          },
          "attributes" : {
            "type" : "array",
            "description" : "The attributes that describe this entity",
            "items" : {
              "$ref" : "#/components/schemas/AttributeObject"
            }
          },
          "features" : {
            "type" : "array",
            "description" : "Device features",
            "items" : {
              "$ref" : "#/components/schemas/Feature"
            }
          },
          "attribute" : {
            "type" : "object",
            "writeOnly" : true
          }
        }
      },
      "Feature" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Feature identifier"
          },
          "properties" : {
            "type" : "array",
            "description" : "Feature properties",
            "items" : {
              "$ref" : "#/components/schemas/PropertyObject"
            }
          },
          "definitions" : {
            "type" : "array",
            "description" : "Feature definition identifiers",
            "items" : {
              "$ref" : "#/components/schemas/DefinitionIdentifier"
            }
          }
        },
        "description" : "Device features"
      },
      "Identifier" : {
        "required" : [ "id", "namespace" ],
        "type" : "object",
        "properties" : {
          "namespace" : {
            "type" : "string",
            "description" : "Unique entity namespace"
          },
          "id" : {
            "type" : "string",
            "description" : "Entity id"
          }
        },
        "description" : "Unique entity identifier"
      },
      "PropertyObject" : {
        "required" : [ "id", "value" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Property identifier"
          },
          "category" : {
            "type" : "string",
            "description" : "Property category, e.g. status, configuration, etc"
          },
          "value" : {
            "type" : "object",
            "description" : "Property value"
          }
        },
        "description" : "Feature properties"
      },
      "Property" : {
        "required" : [ "id", "value" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Property identifier"
          },
          "category" : {
            "type" : "string",
            "description" : "Property category, e.g. status, configuration, etc"
          },
          "value" : {
            "type" : "object",
            "description" : "Property value"
          }
        }
      },
      "Attribute" : {
        "required" : [ "path", "value" ],
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "description" : "Attribute path"
          },
          "value" : {
            "type" : "object",
            "description" : "Attribute value"
          }
        }
      },
      "Constraint" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "MIN", "MAX", "STRLEN", "REGEX", "MIMETYPE", "SCALING", "DEFAULT", "NULLABLE" ]
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "FeatureDefinition" : {
        "required" : [ "id", "model" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/DefinitionIdentifier"
          },
          "model" : {
            "$ref" : "#/components/schemas/FunctionBlock"
          }
        }
      },
      "FunctionBlock" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/ModelId"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "FunctionBlock", "InformationModel", "DataType" ]
          },
          "displayName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "fileName" : {
            "type" : "string"
          },
          "references" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelId"
            }
          },
          "configurationProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelProperty"
            }
          },
          "statusProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelProperty"
            }
          },
          "faultProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelProperty"
            }
          },
          "events" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelEvent"
            }
          },
          "operations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Operation"
            }
          }
        },
        "description" : "Feature definition Function Block"
      },
      "ModelEvent" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ModelProperty"
            }
          }
        }
      },
      "ModelId" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "namespace" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        }
      },
      "ModelProperty" : {
        "type" : "object",
        "properties" : {
          "mandatory" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "type" : {
            "type" : "object"
          },
          "constraints" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Constraint"
            }
          },
          "multiple" : {
            "type" : "boolean"
          }
        }
      },
      "Operation" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "result" : {
            "$ref" : "#/components/schemas/ReturnType"
          },
          "params" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Param"
            }
          },
          "breakable" : {
            "type" : "boolean"
          }
        }
      },
      "Param" : {
        "type" : "object",
        "properties" : {
          "mandatory" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "type" : {
            "type" : "object"
          },
          "constraints" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Constraint"
            }
          },
          "multiple" : {
            "type" : "boolean"
          }
        }
      },
      "ReturnType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "object"
          },
          "multiple" : {
            "type" : "boolean"
          },
          "primitive" : {
            "type" : "boolean"
          }
        }
      },
      "Gateway" : {
        "required" : [ "identifier" ],
        "type" : "object",
        "properties" : {
          "identifier" : {
            "$ref" : "#/components/schemas/Identifier"
          },
          "gatewayId" : {
            "type" : "string",
            "description" : "Gateway identifier this device is attached to"
          },
          "policyId" : {
            "type" : "string",
            "description" : "Policy identifier"
          },
          "attributes" : {
            "type" : "array",
            "description" : "The attributes that describe this entity",
            "items" : {
              "$ref" : "#/components/schemas/AttributeObject"
            }
          },
          "features" : {
            "type" : "array",
            "description" : "Device features",
            "items" : {
              "$ref" : "#/components/schemas/Feature"
            }
          },
          "revision" : {
            "type" : "integer",
            "description" : "Device revision",
            "format" : "int64"
          },
          "modified" : {
            "type" : "integer",
            "description" : "Modified timestamp",
            "format" : "int64"
          },
          "attribute" : {
            "type" : "object",
            "writeOnly" : true
          }
        }
      },
      "Credentials" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of credentials. Values could be on of:  <ul>\n  <li>HASHED_PASSWORD - A credential type for storing a password for a device</li>\n  <li>PRE_SHARED_SECRET - A credential type for storing a Pre-shared Key as used in TLS handshakes</li>\n  <li>CERTIFICATE - A credential type for storing the formatted subject DN of a client certificate that is used to authenticate the device as part of a TLS handshake</li>\n </ul>",
            "enum" : [ "HASHED_PASSWORD", "PRE_SHARED_SECRET", "CERTIFICATE" ]
          },
          "authId" : {
            "type" : "string",
            "description" : "The identity that the device should be authenticated as"
          },
          "secret" : {
            "type" : "string",
            "description" : "Secret to authenticate the device against(valid for HASHED_PASSWORD and PRE_SHARED_SECRET type)"
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "If set to false the credentials are not supposed to be used to authenticate devices any longer."
          }
        },
        "description" : " Credentials are used to authenticate Devices connecting to the adapter. They could be of a certain type which indicates which authentication mechanism the credentials can be used with"
      },
      "RegisterInfo" : {
        "type" : "object",
        "properties" : {
          "credentials" : {
            "$ref" : "#/components/schemas/Credentials"
          },
          "directoryPath" : {
            "type" : "string",
            "description" : "Directory path"
          },
          "attributes" : {
            "type" : "array",
            "description" : "Attribute values",
            "items" : {
              "$ref" : "#/components/schemas/AttributeObject"
            }
          }
        }
      },
      "Tag" : {
        "required" : [ "identifier", "name" ],
        "type" : "object",
        "properties" : {
          "identifier" : {
            "$ref" : "#/components/schemas/Identifier"
          },
          "attributes" : {
            "type" : "array",
            "description" : "The attributes that describe this entity",
            "items" : {
              "$ref" : "#/components/schemas/AttributeObject"
            }
          },
          "name" : {
            "type" : "string",
            "description" : "The name of this entity"
          },
          "attribute" : {
            "type" : "object",
            "writeOnly" : true
          }
        }
      },
      "Directory" : {
        "required" : [ "identifier", "name", "path" ],
        "type" : "object",
        "properties" : {
          "identifier" : {
            "$ref" : "#/components/schemas/Identifier"
          },
          "attributes" : {
            "type" : "array",
            "description" : "The attributes that describe this entity",
            "items" : {
              "$ref" : "#/components/schemas/AttributeObject"
            }
          },
          "name" : {
            "type" : "string",
            "description" : "The name of this entity"
          },
          "path" : {
            "type" : "string",
            "description" : "The path of this directory in the directory tree"
          },
          "attribute" : {
            "type" : "object",
            "writeOnly" : true
          }
        }
      },
      "Parameters" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "identifier" : {
            "$ref" : "#/components/schemas/Identifier"
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AttributeObject"
            }
          },
          "name" : {
            "type" : "string",
            "description" : "User-friendly name"
          }
        }
      },
      "DirectoryParameters" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "identifier" : {
            "$ref" : "#/components/schemas/Identifier"
          },
          "attributes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AttributeObject"
            }
          },
          "name" : {
            "type" : "string",
            "description" : "User-friendly name"
          },
          "parentPath" : {
            "type" : "string",
            "description" : "Parent directory path"
          }
        }
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "description" : "JSON Web Token issued by a supported OAuth 2.0 Identity Provider.",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "refreshToken" : {
        "type" : "apiKey",
        "description" : "Refresh token issued by a supported OAuth 2.0 Identity Provider.",
        "name" : "x-refresh-token",
        "in" : "header"
      }
    }
  }
}